name: Packer Build

on:
  pull_request:
    branches: [main]
    # types: [closed]
jobs:
  # packer:
  #   runs-on: ubuntu-latest
  #   name: Packer Build
  #   steps:
  #       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #       - name: Checkout code
  #         uses: actions/checkout@v3
  #       # Install Java JDK version 17
  #       - name: Install Java 17
  #         uses: actions/setup-java@v3
  #         with:
  #           java-version: 17
  #           distribution: temurin
  #       # Install MySQL
  #       - name: Setup MySQL
  #         run: sudo systemctl start mysql.service
  #       - name: Create Logging Directory and log files
  #         run: sudo mkdir --parents /var/log/csye6225
  #   # Create errors.log file
  #       - name: Create errors.log
  #         run: sudo touch /var/log/csye6225/errors.log
  #   # Create info.log file
  #       - name: Create info.log
  #         run: sudo touch /var/log/csye6225/info.log
  #       - name: Create warn.log
  #         run: sudo touch /var/log/csye6225/warn.log
  #       - name: Create debug.log
  #         run: sudo touch /var/log/csye6225/debug.log
  #   # Grant write access for log files
  #       - name: Grant write access
  #         run: |
  #             sudo chmod ugo+wx /var/log/csye6225/errors.log
  #             sudo chmod ugo+wx /var/log/csye6225/info.log
  #             sudo chmod ugo+wx /var/log/csye6225/warn.log
  #             sudo chmod ugo+wx /var/log/csye6225/debug.log
  #       # Start spring boot and run integration tests
  #       - name: Run integration tests
  #         run: | 
  #           mvn spring-boot:run -Dspring.datasource.url=jdbc:mysql://localhost:3306/clouddb?createDatabaseIfNotExist=true -Dspring.datasource.username=${{secrets.MYSQL_USERNAME}} -Dspring.datasource.password=${{secrets.MYSQL_PASSWORD}} -Dspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver -Dspring.jpa.hibernate.ddl-auto=update -Dspring.datasource.hikari.connection-timeout=20000 &
  #           sleep 60
  #           mvn test
  #       # Build Spring boot project and remove old artifacts
  #       - name: Build project
  #         run: mvn clean package -DskipTests
  #       # Provide Gcloud service user creds
  #       - id: auth
  #         uses: google-github-actions/auth@v2
  #         with:
  #           credentials_json: ${{ secrets.GCLOUD_SERVICE_USER_JSON }}
  #       # Setup Gcloud
  #       - name: Set up Cloud SDK
  #         uses: google-github-actions/setup-gcloud@v2
  #       # Check if Gcloud installed successfully
  #       - name: Use gcloud CLI
  #         run: gcloud info
  #       # Setup Packer
  #       - name: Setup Packer
  #         uses: hashicorp/setup-packer@main
  #       # Initialise Packer
  #       - name: Packer init
  #         run: packer init ./main.pkr.hcl
  #       # Format packer files
  #       - name: Packer format
  #         run: packer fmt -check ./main.pkr.hcl
  #       # Validate Packer Files
  #       - name: Packer validate
  #         run: packer validate ./main.pkr.hcl
  refresh-instance:
    # needs: packer
    runs-on: ubuntu-latest
    name:  Refresh Instance to Use Latest Machine Image
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
          - name: Checkout code
            uses: actions/checkout@v3
    # Install Java JDK version 17
          # - name: Install Java 17
          #   uses: actions/setup-java@v3
          #   with:
          #     java-version: 17
          #     distribution: temurin
          # Build Spring boot project and remove old artifacts
          # - name: Build project
          #   run: mvn clean package -DskipTests
                  # Create csye6225 directory
      #     - name: Create Logging Directory and log files
      #       run: sudo mkdir --parents /var/log/csye6225
      # # Create errors.log file
      #     - name: Create errors.log
      #       run: sudo touch /var/log/csye6225/errors.log
      # Create info.log file
      #     - name: Create info.log
      #       run: sudo touch /var/log/csye6225/info.log
      #     - name: Create warn.log
      #       run: sudo touch /var/log/csye6225/warn.log
      #     - name: Create debug.log
      #       run: sudo touch /var/log/csye6225/debug.log
      # # Grant write access for log files
      #     - name: Grant write access
      #       run: |
      #           sudo chmod ugo+wx /var/log/csye6225/errors.log
      #           sudo chmod ugo+wx /var/log/csye6225/info.log
      #           sudo chmod ugo+wx /var/log/csye6225/warn.log
      #           sudo chmod ugo+wx /var/log/csye6225/debug.log
          - name: Setup Gcloud CLI
            uses: google-github-actions/auth@v2
            with:
              credentials_json: ${{ secrets.GCLOUD_SERVICE_USER_JSON }}
          # Setup Gcloud
          - name: Set up Cloud SDK
            uses: google-github-actions/setup-gcloud@v2
          # Check if Gcloud installed successfully
          - name: Use gcloud CLI
            run: gcloud info
          # Setup Packer
          # - name: Setup Packer
          #   uses: hashicorp/setup-packer@main
          # # Initialise Packer
          # - name: Packer init
          #   run: packer init ./main.pkr.hcl
          # Packer build
          # - name: Packer Build
          #   run: |
          #       packer build ./main.pkr.hcl
          #       image_id=$(gcloud compute images list --filter="family=csye6225-app-image" --format="value(NAME)" --sort-by=~creationTimestamp --limit=1)
          #       echo "IMAGE_ID=$image_id" >> $GITHUB_ENV
          #       echo "Image ID: $image_id"
          # Generate random name
          - name: Generate Random Name
            run: |
                RANDOM_NAME=$(uuidgen | tr -d '-' | cut -c1-6)
                echo "Generated random name: $RANDOM_NAME"
                echo "RANDOM_NAME=$RANDOM_NAME" >> $GITHUB_ENV
          - name: Print env variables
            run: |
                echo "IMAGE_ID: $IMAGE_ID"
                echo echo "RANDOM_ID: $RANDOM_ID"
          # Creating new image template using the latest version of MI
          - name:  Create Image Template from Latest Image
            run:  |
                gcloud compute instance-templates create ${{ vars.INSTANCE_TEMPLATE_NAME }}-${{ env.RANDOM_NAME }} \
                --instance-template-region=${{ vars.REGION }} \
                --region=${{vars.REGION}} \
                --machine-type=e2-medium \
                --network=${{ vars.NETWORK }} \
                --subnet=${{ vars.SUB_NETWORK }} \
                --image-project=${{ vars.PROJECT_ID }} \
                --image=csye6225-1713280847 \
                --tags=${{ vars.TAGS }} \
                --no-address \
                --metadata=startup-script='#!/bin/bash
                                            if [ ! -f "/opt/db.properties" ] 
                                            then
                                            sudo touch /opt/db.properties
                                            
                                            sudo echo "spring.datasource.url=jdbc:mysql://${{ vars.GCP_DB_INSTANCE_IP}}:3306/webapp?createDatabaseIfNotExist=true" >> /opt/db.properties
                                            sudo echo "spring.datasource.username=webapp" >> /opt/db.properties
                                            sudo echo "spring.datasource.password=${{vars.GCP_DB_PASSWORD}}" >> /opt/db.properties
                                            sudo echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> /opt/db.properties
                                            sudo echo "spring.jpa.hibernate.ddl-auto=update" >> /opt/db.properties
                                            sudo echo "spring.jpa.show-sql=true" >> /opt/db.properties
                                            sudo echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> /opt/db.properties
                                            
                                            sudo chown -R csye6225:csye6225 /opt/db.properties
                                            else
                                            sudo echo "db.properties already exists" >> /var/log/csye6225/app.log
                                            fi
                                            sudo touch /opt/pubsub-service-account-key.json' \
                --service-account=${{ vars.LOGGING_SERVICE_ACCOUNT_EMAIL  }} \
                --scopes='https://www.googleapis.com/auth/cloud-platform'
      
          - name: Refresh instances
            run: |
                gcloud compute instance-groups managed rolling-action start-update ${{ vars.MIG }} \
                --version=template=projects/csye6225-abhinav-dev/regions/us-east1/instanceTemplates/${{ vars.INSTANCE_TEMPLATE_NAME }}-${{ env.RANDOM_NAME }} \
                --region=${{ vars.REGION }} \
                --max-surge=3 \
                --max-unavailable=3 \
                --quiet
      
          - name: Check Status
            run: |
              status=$(gcloud compute instance-groups managed wait-until ${{ vars.MIG }} --region=${{ vars.REGION }} --stable)
              echo "Status: $status"
              if [[ "$status" = "Group is stable" ]]; then
                echo "Refreshed successfully"
              else
                echo "Refresh Failed"
                exit 1
              fi